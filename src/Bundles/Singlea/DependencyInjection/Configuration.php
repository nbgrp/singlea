<?php declare(strict_types=1);
// SPDX-License-Identifier: BSD-3-Clause

namespace SingleA\Bundles\Singlea\DependencyInjection;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;
use Symfony\Component\HttpFoundation\Cookie;

/**
 * @final
 */
class Configuration implements ConfigurationInterface
{
    /**
     * @suppress PhanPossiblyNonClassMethodCall, PhanPossiblyUndeclaredMethod
     */
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('singlea');
        $rootNode = $treeBuilder->getRootNode();

        // @formatter:off
        /** @phpstan-ignore-next-line */
        $rootNode
            ->info('SingleA Bundle configuration')
            ->children()
                ->arrayNode('client')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->scalarNode('id_query_parameter')
                            ->info('The client ID query parameter name.')
                            ->cannotBeEmpty()
                            ->defaultValue('client_id')
                        ->end()
                        ->scalarNode('secret_query_parameter')
                            ->info('The client secret query parameter name.')
                            ->cannotBeEmpty()
                            ->defaultValue('secret')
                        ->end()
                        ->scalarNode('trusted_clients')
                            ->info('A list of trusted client (application) IP addresses from which requests are allowed.')
                            ->defaultNull()
                        ->end()
                        ->scalarNode('trusted_registrars')
                            ->info('A list of trusted IP addresses from which registration requests are allowed.')
                            ->defaultNull()
                        ->end()
                        ->scalarNode('registration_ticket_header')
                            ->info('The registration ticket header name (if the RegistrationTicketManagerInterface implementation present).')
                            ->cannotBeEmpty()
                            ->defaultValue('X-Registration-Ticket')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('ticket')
                    ->isRequired()
                    ->children()
                        ->scalarNode('header')
                            ->info('The user ticket header name (passed by SingleA client).')
                            ->cannotBeEmpty()
                            ->defaultValue('X-Ticket')
                        ->end()
                        ->scalarNode('cookie_name')
                            ->info('The user ticket cookie name.')
                            ->cannotBeEmpty()
                            ->defaultValue('tkt')
                        ->end()
                        ->integerNode('ttl')
                            ->info('The user ticket cookie TTL.')
                            ->defaultValue(3600)
                        ->end()
                        ->scalarNode('domain')
                            ->info('The user ticket cookie domain name.')
                            ->isRequired()
                            ->cannotBeEmpty()
                        ->end()
                        ->enumNode('samesite')
                            ->info('The user ticket cookie SameSite.')
                            ->values([Cookie::SAMESITE_LAX, Cookie::SAMESITE_STRICT, Cookie::SAMESITE_NONE])
                            ->defaultValue(Cookie::SAMESITE_LAX)
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('authentication')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('sticky_session')
                            ->info('Whether to prolong the authentication session on re-login.')
                            ->defaultFalse()
                        ->end()
                        ->scalarNode('redirect_uri_query_parameter')
                            ->info('The redirect URI query parameter name.')
                            ->cannotBeEmpty()
                            ->defaultValue('redirect_uri')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('signature')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->integerNode('request_ttl')
                            ->info('The maximum time (in seconds) it takes for transfer a request from the client to the server.')
                            ->defaultValue(60)
                        ->end()
                        ->scalarNode('signature_query_parameter')
                            ->info('The request signature query parameter name.')
                            ->cannotBeEmpty()
                            ->defaultValue('sg')
                        ->end()
                        ->scalarNode('timestamp_query_parameter')
                            ->info('The request timestamp query parameter name.')
                            ->cannotBeEmpty()
                            ->defaultValue('ts')
                        ->end()
                        ->arrayNode('extra_exclude_query_parameters')
                            ->info('Extra query parameters to be excluded from signature validation check.')
                            ->scalarPrototype()->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('encryption')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->variableNode('client_keys')
                            ->info('Sodium key pairs for encrypting/decrypting client secrets.')
                            ->defaultValue([])
                        ->end()
                        ->variableNode('user_keys')
                            ->info('Sodium key pairs for encrypting/decrypting user attributes.')
                            ->defaultValue([])
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('realm')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->scalarNode('default')
                            ->info('Realm for requests without an explicit realm.')
                            ->cannotBeEmpty()
                            ->defaultValue('main')
                        ->end()
                        ->scalarNode('query_parameter')
                            ->info('The realm query parameter name.')
                            ->cannotBeEmpty()
                            ->defaultValue('realm')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('marshaller')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('use_igbinary')
                            ->defaultNull()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('user_attributes')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('use_igbinary')
                            ->defaultNull()
                        ->end()
                    ->end()
                ->end()
            ->end()
        ;
        // @formatter:on

        return $treeBuilder;
    }
}
